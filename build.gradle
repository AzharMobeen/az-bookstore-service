plugins {
	id 'org.springframework.boot' version '2.7.4'
	id 'io.spring.dependency-management' version '1.0.14.RELEASE'
	id 'java'
	id 'jacoco'
	id "org.sonarqube" version "3.4.0.2513"
}

group = 'com.az.bookstore'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '1.8'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springdoc:springdoc-openapi-ui:1.6.11'
	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'com.h2database:h2'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

tasks.named('test') {
	useJUnitPlatform()
}

test {
	finalizedBy jacocoTestReport
}
jacocoTestReport {
	dependsOn test
}

jacocoTestReport {
	reports {
		xml.enabled(true)
	}
}
jacocoTestReport {
	afterEvaluate {
		classDirectories.setFrom(files(classDirectories.files.collect {
			fileTree(dir: it, exclude:  [
					'com/az/bookstore/dto/**',
					'com/az/bookstore/entity/**',
					'com/az/bookstore/exception/**',
					'com/az/bookstore/repository/**',
					'com/az/bookstore/config/**',
					'com/az/bookstore/constant/**',
					'com/az/bookstore/AzBookstoreApplication.class'
			])
		}))
	}
}
sonarqube {
	properties {
		property 'sonar.projectName', 'az-bookstore-service'
		property 'sonar.projectKey', 'az-bookstore-service'
		property 'sonar.host.url', 'http://localhost:9000'
		property "sonar.exclusions", "**/com/az/bookstore/dto/**, **/com/az/bookstore/entity/**, **/com/az/bookstore/constant/**, **/com/az/bookstore/config/**, **/com/az/bookstore/exception/**, **/com/az/bookstore/repository/**, **/com/az/bookstore/AzBookstoreApplication.java"
		property "sonar.issue.ignore.multicriteria", "e1"
		property "sonar.issue.ignore.multicriteria.e1.resourceKey", "src/test/java/**/*"
		property "sonar.issue.ignore.multicriteria.e1.ruleKey", "*"
	}
}

tasks.named('sonarqube').configure {
	dependsOn test
}

sourceSets {
	main {
		java {
			srcDirs "src/main/java"
		}
	}

	test {
		java {
			srcDirs "src/test/java"
		}
		resources {
			srcDir file('src/test/java')
			exclude '**/*.java'
		}
	}
}
